##################### MAIN #####################
FBA_BURN_DIR			:= $(MAIN_FBA_DIR)/burn
FBA_BURN_DEVICES_DIR    := $(MAIN_FBA_DIR)/burn/devices
FBA_BURN_DRIVERS_DIR	:= $(MAIN_FBA_DIR)/burn/drv
FBA_BURN_SND_DIR        := $(MAIN_FBA_DIR)/burn/snd
FBA_CPU_DIR				:= $(MAIN_FBA_DIR)/cpu
FBA_GENERATED_DIR		:= $(MAIN_FBA_DIR)/dep/generated
FBA_LIB_DIR				:= $(MAIN_FBA_DIR)/dep/libs
FBA_SCRIPTS_DIR			:= $(MAIN_FBA_DIR)/dep/scripts
LIBRETRO_DIR			:= $(MAIN_FBA_DIR)/libretro
LIBRETRO_COMM_DIR		:= $(LIBRETRO_DIR)/libretro-common

##################### DRV #####################
DRV_CAPCOM_DIR				:= $(FBA_BURN_DRIVERS_DIR)/capcom
DRV_CPS3_DIR				:= $(FBA_BURN_DRIVERS_DIR)/cps3
DRV_NEOGEO_DIR				:= $(FBA_BURN_DRIVERS_DIR)/neogeo
DRV_PGM_DIR					:= $(FBA_BURN_DRIVERS_DIR)/pgm
DRV_IREM_DIR				:= $(FBA_BURN_DRIVERS_DIR)/irem
DRV_PST90S_DIR              := $(FBA_BURN_DRIVERS_DIR)/pst90s
DRV_KONAMI_DIR				:= $(FBA_BURN_DRIVERS_DIR)/konami

##################### CPU #####################
CPU_ARM7_DIR				:= $(FBA_CPU_DIR)/arm7
CPU_M68K_DIR				:= $(FBA_CPU_DIR)/m68k
CPU_NEC_DIR	                := $(FBA_CPU_DIR)/nec
CPU_SH2_DIR                 := $(FBA_CPU_DIR)/sh2
CPU_Z80_DIR                 := $(FBA_CPU_DIR)/z80

BURN_BLACKLIST := \
	$(FBA_CPU_DIR)/arm7/arm7exec.c \
	$(FBA_CPU_DIR)/arm7/arm7core.c \
	$(FBA_CPU_DIR)/adsp2100/2100ops.c \
	$(FBA_CPU_DIR)/hd6309/6309tbl.c \
	$(FBA_CPU_DIR)/hd6309/6309ops.c \
	$(FBA_CPU_DIR)/konami/konamtbl.c \
	$(FBA_CPU_DIR)/konami/konamops.c \
	$(FBA_CPU_DIR)/m68k/m68k_in.c \
	$(FBA_CPU_DIR)/m6800/6800ops.c \
	$(FBA_CPU_DIR)/m6800/6800tbl.c \
	$(FBA_CPU_DIR)/m6805/6805ops.c \
	$(FBA_CPU_DIR)/m6809/6809ops.c \
	$(FBA_CPU_DIR)/m6809/6809tbl.c \
	$(FBA_CPU_DIR)/sh2/mksh2.cpp \
	$(FBA_CPU_DIR)/sh2/mksh2-x86.cpp \
	$(FBA_CPU_DIR)/m68k/m68kmake.c \
	$(FBA_CPU_DIR)/m68k/m68kfpu.c \
	$(FBA_CPU_DIR)/m68k/m68kdasm.c \
	$(FBA_CPU_DIR)/sh2/mksh2.cpp \
	$(FBA_BURNER_DIR)/sshot.cpp \
	$(FBA_BURNER_DIR)/conc.cpp \
	$(FBA_BURNER_DIR)/cong.cpp \
	$(FBA_BURNER_DIR)/image.cpp \
	$(FBA_BURNER_DIR)/misc.cpp \
	$(FBA_BURNER_DIR)/state.cpp \
	$(FBA_BURNER_DIR)/gami.cpp \
	$(FBA_BURNER_DIR)/gamc.cpp \
	$(FBA_BURNER_DIR)/wave_writer.cpp \
	$(FBA_CPU_DIR)/h6280/tblh6280.c \
	$(FBA_CPU_DIR)/m6502/t65sc02.c \
	$(FBA_CPU_DIR)/m6502/t65c02.c \
	$(FBA_CPU_DIR)/m6502/tdeco16.c \
	$(FBA_CPU_DIR)/m6502/tn2a03.c \
	$(FBA_CPU_DIR)/m6502/t6502.c \
	$(FBA_CPU_DIR)/nec/v25sfr.c \
	$(FBA_CPU_DIR)/nec/v25instr.c \
	$(FBA_CPU_DIR)/nec/necinstr.c \
	$(FBA_CPU_DIR)/mips3/mips3_dasm.cpp \
	$(FBA_CPU_DIR)/tms34010/tms34010_dasm.cpp \
	$(FBA_CPU_DIR)/tms34010/tms34010_newdasm.cpp \
	$(FBA_BURN_DIR)/drv/capcom/ctv_make.cpp \
	$(FBA_BURN_DIR)/drv/pgm/pgm_sprite_create.cpp \
	$(FBA_INTERFACE_DIR)/audio/aud_interface.cpp \
	$(FBA_CPU_DIR)/i8051/mcs51ops.c \
	$(FBA_CPU_DIR)/upd7810/7810ops.c \
	$(FBA_CPU_DIR)/upd7810/7810tbl.c \
	$(FBA_CPU_DIR)/v60/op12.c \
	$(FBA_CPU_DIR)/v60/am.c \
	$(FBA_CPU_DIR)/v60/am1.c \
	$(FBA_CPU_DIR)/v60/am2.c \
	$(FBA_CPU_DIR)/v60/op7a.c \
	$(FBA_CPU_DIR)/v60/am3.c \
	$(FBA_CPU_DIR)/v60/op2.c \
	$(FBA_CPU_DIR)/v60/op4.c \
	$(FBA_CPU_DIR)/v60/op6.c \
	$(FBA_CPU_DIR)/v60/op3.c \
	$(FBA_CPU_DIR)/v60/op5.c \
	$(FBA_CPU_DIR)/v60/optable.c \
	$(FBA_CPU_DIR)/v60/v60mem.c \
	$(FBA_CPU_DIR)/v60/v60d.c \
	$(FBA_CPU_DIR)/i8x41/8x41dasm.c \
	$(FBA_CPU_DIR)/z180/z180xy.c \
	$(FBA_CPU_DIR)/z180/z180fd.c \
	$(FBA_CPU_DIR)/z180/z180op.c \
	$(FBA_CPU_DIR)/z180/z180ed.c \
	$(FBA_CPU_DIR)/z180/z180dd.c \
	$(FBA_CPU_DIR)/z180/z180cb.c

ifeq ($(AUTOGEN_DATS), 0)
	BURN_BLACKLIST += $(FBA_BURNER_DIR)/dat.cpp
else
	FBA_DEFINES += -DAUTOGEN_DATS
endif

FBA_BURN_DRIVERS_DIRS := \
	$(FBA_BURN_DRIVERS_DIR) \
	$(DRV_CAPCOM_DIR) \
	$(DRV_CPS3_DIR) \
	$(DRV_NEOGEO_DIR) \
	$(DRV_PGM_DIR) \
	$(DRV_IREM_DIR) \
	$(DRV_PST90S_DIR) \
	$(DRV_KONAMI_DIR)

FBA_BURN_DIRS := \
	$(FBA_BURN_DIR) \
	$(FBA_BURN_DEVICES_DIR) \
	$(FBA_BURN_DRIVERS_DIRS) \
	$(FBA_BURN_SND_DIR)

FBA_CPU_DIRS := \
	$(FBA_CPU_DIR) \
	$(CPU_ARM7_DIR) \
	$(CPU_M68K_DIR) \
	$(CPU_NEC_DIR) \
	$(CPU_SH2_DIR) \
	$(CPU_Z80_DIR)

FBA_SRC_DIRS := $(FBA_BURN_DIRS) $(FBA_CPU_DIRS)

SOURCES_C += $(FBA_LIB_DIR)/mxml/mxml-attr.c \
	$(FBA_LIB_DIR)/mxml/mxml-entity.c \
	$(FBA_LIB_DIR)/mxml/mxml-file.c \
	$(FBA_LIB_DIR)/mxml/mxml-get.c \
	$(FBA_LIB_DIR)/mxml/mxml-index.c \
	$(FBA_LIB_DIR)/mxml/mxml-node.c \
	$(FBA_LIB_DIR)/mxml/mxml-search.c \
	$(FBA_LIB_DIR)/mxml/mxml-set.c \
	$(FBA_LIB_DIR)/mxml/mxml-private.c \
	$(FBA_LIB_DIR)/mxml/mxml-string.c

ifneq ($(STATIC_LINKING), 1)
	SOURCES_C += $(LIBRETRO_COMM_DIR)/file/file_path.c \
		$(LIBRETRO_COMM_DIR)/encodings/encoding_utf.c \
		$(LIBRETRO_COMM_DIR)/compat/compat_posix_string.c \
		$(LIBRETRO_COMM_DIR)/compat/compat_strcasestr.c \
		$(LIBRETRO_COMM_DIR)/compat/compat_strl.c \
		$(LIBRETRO_COMM_DIR)/compat/fopen_utf8.c \
		$(LIBRETRO_COMM_DIR)/string/stdstring.c \
		$(LIBRETRO_COMM_DIR)/streams/file_stream.c \
		$(LIBRETRO_COMM_DIR)/streams/file_stream_transforms.c \
		$(LIBRETRO_COMM_DIR)/vfs/vfs_implementation.c \
		$(LIBRETRO_COMM_DIR)/features/features_cpu.c \
		$(LIBRETRO_COMM_DIR)/file/config_file.c \
		$(LIBRETRO_COMM_DIR)/file/config_file_userdata.c \
		$(LIBRETRO_COMM_DIR)/lists/string_list.c \
		$(LIBRETRO_COMM_DIR)/memmap/memalign.c \
		$(LIBRETRO_COMM_DIR)/rthreads/rthreads..c
endif

INCLUDE_DIRS := \
	$(LIBRETRO_COMM_DIR)/include \
	$(LIBRETRO_DIR) \
	$(FBA_BURN_DEVICES_DIR) \
	$(FBA_BURN_DRIVERS_DIRS) \
	$(FBA_BURN_SND_DIR) \
	$(FBA_BURN_DIR) \
	$(FBA_CPU_DIR)

INCLUDE_DIRS += \
	$(FBA_LIB_DIR)/zlib \
	$(FBA_LIB_DIR)/lib7z \
	$(FBA_LIB_DIR)/mxml \
	$(FBA_LIB_DIR) \
	$(FBA_GENERATED_DIR)

ARM_FLAGS =

ifeq ($(USE_X64_DRC), 1)
	FBA_DEFINES  += -DXBYAK_NO_OP_NAMES -DMIPS3_X64_DRC
	FBA_SRC_DIRS += $(MIPS3_X64_DYNAREC_DIR)
	ifeq (,$(findstring msvc,$(platform)))
		CXXFLAGS += -std=gnu++11
	endif
else
	ifeq (,$(findstring msvc,$(platform)))
		CXXFLAGS += -std=gnu++98
	endif
endif

ifeq ($(USE_CYCLONE), 1)
	FBA_DEFINES		+= -DUSE_CYCLONE
	INCLUDE_DIRS	+= $(FBA_CPU_DIR)/cyclone
	SOURCES_S		+= $(FBA_CPU_DIR)/cyclone/Cyclone.S
	BURN_BLACKLIST	+= $(FBA_CPU_DIR)/m68000_intf.cpp
	ARM_FLAGS		= -mword-relocations -mlittle-endian -munaligned-access
	# ios and android don't support this
	ifneq (,$(findstring ios,$(platform)))
		ARM_FLAGS =
	endif
	ifneq (,$(findstring android,$(platform)))
		ARM_FLAGS =
	endif
	CFLAGS			+= -fno-optimize-sibling-calls -funsafe-math-optimizations -fsingle-precision-constant
	CXXFLAGS		+= -fno-optimize-sibling-calls -funsafe-math-optimizations -fsingle-precision-constant
else
	BURN_BLACKLIST	+= $(FBA_CPU_DIR)/c68000_intf.cpp
endif

NEON_FLAGS=

ifeq ($(HAVE_NEON), 1)
	NEON_FLAGS = -mvectorize-with-neon-quad
	# ios and android don't support this
	ifneq (,$(findstring ios,$(platform)))
		NEON_FLAGS =
	endif
	ifneq (,$(findstring android,$(platform)))
		NEON_FLAGS =
	endif
endif

ifeq ($(EXTERNAL_ZLIB), 1)
	FBA_DEFINES += -DEXTERNAL_ZLIB
	LDFLAGS += -lz
else
	FBA_SRC_DIRS += $(FBA_LIB_DIR)/zlib
endif

ifeq ($(INCLUDE_7Z_SUPPORT), 1)
	FBA_DEFINES += -DINCLUDE_7Z_SUPPORT
	FBA_SRC_DIRS += $(FBA_LIB_DIR)/lib7z
	BURN_BLACKLIST += $(FBA_LIB_DIR)/lib7z/LzFindMt.c \
		$(FBA_LIB_DIR)/lib7z/LzmaEnc.c \
		$(FBA_LIB_DIR)/lib7z/MtCoder.c \
		$(FBA_LIB_DIR)/lib7z/Lzma2Enc.c \
		$(FBA_LIB_DIR)/lib7z/Bcj2Enc.c \
		$(FBA_LIB_DIR)/lib7z/Threads.c \
		$(FBA_LIB_DIR)/lib7z/Lzma86Enc.c \
		$(FBA_LIB_DIR)/lib7z/LzmaLib.c \
		$(FBA_LIB_DIR)/lib7z/XzEnc.c
else
	BURN_BLACKLIST += $(FBA_BURNER_DIR)/un7z.cpp
endif

SOURCES_C   += $(filter-out $(BURN_BLACKLIST),$(foreach dir,$(FBA_SRC_DIRS),$(wildcard $(dir)/*.c)))
SOURCES_CXX += $(filter-out $(BURN_BLACKLIST),$(foreach dir,$(FBA_SRC_DIRS),$(wildcard $(dir)/*.cpp)))

SOURCES_C   += $(filter-out $(BURN_BLACKLIST),$(foreach dir,$(LIBRETRO_DIR),$(wildcard $(dir)/*.c)))
SOURCES_CXX += $(filter-out $(BURN_BLACKLIST),$(foreach dir,$(LIBRETRO_DIR),$(wildcard $(dir)/*.cpp)))

ifeq (,$(findstring msvc,$(platform)))
	CFLAGS += -std=gnu99
endif

# GIT HASH
GIT_VERSION := " $(shell git rev-parse --short HEAD || echo unknown)"
ifneq ($(GIT_VERSION)," unknown")
	CXXFLAGS += -DGIT_VERSION=\"$(GIT_VERSION)\"
endif
